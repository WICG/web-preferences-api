<pre class='metadata'>
Title: Web Preferences API
Shortname: web-preferences-api
Level: 1
Status: UD
Group: WICG
Repository: lukewarlow/web-preferences-api
Markup Shorthands: css no, markdown yes
URL: https://specs.lukewarlow.dev/web-preferences-api/
Editor: Luke Warlow, unaffiliated, luke@warlow.dev
!Tests: <a href=https://github.com/w3c/web-platform-tests/tree/master/web-preferences-api>web-platform-tests web-preferences-api/</a> (<a href=https://github.com/w3c/web-platform-tests/labels/web-preferences-api>not started</a>)
Abstract: The Web Preference API aims to provide a way for sites to override the value for a given user preference (e.g. color-scheme preference) in a way that fully integrates with existing Web APIs.
</pre>

<pre class="link-defaults">
spec:html; type:dfn; text:origin
</pre>

Issue: This spec requires large amounts of work to section it and word it in ways that are normative. It is currently a very rough draft.

# Introduction # {#sec-intro}

*This section is non-normative.*

Currently, website authors have a choice when wishing to honour a user's preference for a given setting:

They can choose to "use the platform" where the user must indicate their preference via their OS or, if lucky, they can override in the browser. This comes with a number of issues:
- Relies on the user's OS or browser offering the ability to change the setting
- Relies on the user knowing how to change the setting in their OS or browser
- No ability to override the setting for a specific site
- No ability to sync preferences for a site across devices

Alternatively, sites can and do offer site-level settings, but this currently comes with a number of issues:
- No integration with [[mediaqueries-5#mf-user-preferences]]
- No integration with conditional resource loading (e.g. using `<source media="(prefers-contrast: more)">`)
- No integration with JS APIs for retrieval of these preferences (e.g. `matchMedia` in [[cssom-view#extensions-to-the-window-interface]]
- No integration with [[USER-PREFERENCE-MEDIA-FEATURES-HEADERS]]
- No integration with the [[css-color-adjust-1#preferred]] concept
- The various client storage mechanisms that could store these preferences can be cleared in a number of scenarios

Issue: Unsure how to link to html spec for the <source media=""> example.

The **Web Preferences API** aims to solve this by providing a way for sites to override the value for a given a user preference.

It is intended for this override to apply permanently and be scoped per origin.
The override should be passed down to sub-resource where possible, see privacy section for details. This explainer refers to "site" but it should be read to mean [=origin=].

# Extensions to the {{Navigator}} interface # {#extensions-to-the-navigator-interface}

<script type=idl>
[Exposed=Window]
partial interface Navigator {
  readonly attribute PreferenceManager preferences;
};
</script>

## {{preferences}} attribute ## {#preferences-attribute}

When getting the {{preferences}} attribute always return the same instance of the {{PreferenceManager}} object.

# {{PreferenceManager}} interface # {#preference-manager}

<script type=idl>
[Exposed=Window]
interface PreferenceManager {
  attribute ColorSchemePref? colorScheme;
  attribute ContrastPref? contrast;
  attribute ReducedMotionPref? reducedMotion;
  attribute ReducedTransparencyPref? reducedTransparency;
  attribute ReducedDataPref? reducedData;

  Promise<sequence<PreferenceSupportData>> getSupported();
};
</script>

Note: The exact set of preferences is down to the browser vendor, but it is expected that the set of preferences will be the same as those defined in [[!mediaqueries-5]].

## {{getSupported}} method ## {#get-supported-method}

<div algorithm>
    The <dfn method for=PreferenceManager>getSupported()</dfn> method, when invoked, must run these steps:

    1. Let |result| be [=a new promise=].
    1. Let |supportedPreferences| be a new empty sequence.
    1. For each preference that the browser supports, add a new {{PreferenceSupportData}} object to |supportedPreferences| with the following properties:
        - `name` set to the name of the preference
        - `values` set to a sequence of strings representing the valid values for the preference
    1. Resolve |result| with |supportedPreferences|.
    1. Return |result|.
</div>

### {{PreferenceSupportData}} interface ### {#preferencesupportdata-interface}

<script type=idl>
[Exposed=Window]
interface PreferenceSupportData {
  readonly attribute DOMString name;
  readonly attribute FrozenArray<DOMString> values;
};
</script>

## Preference attributes ## {#preference-attributes}

### Setting a preference attribute ### {#setting-a-preference-attribute}

<div algorithm='setting preference override'>
    The preference attributes, when set, must run these steps:

    1. Let |preference| be the preference attribute's name.
    1. Let |validValues| be the preference attribute's valid values.
    1. If |value| is not in |validValues|, return.
    1. If |value| is the same as the preference override for |preference|, return.
    1. Set the preference override for |preference| to |value|.
</div>

Issue: This algorithm needs more detail on where the overrides are stored. Also need to define what happens when a preference is overridden, with specific regard to sub-resources.

### Getting a preference attribute ### {#getting-a-preference-attribute}

<div algorithm='getting-preference-override'>
    The preference attributes, when accessed, must run these steps:

    1. Let |preference| be the preference attribute's name.
    1. If no overrides have been set for the preference, return `null`.
    1. Let |result| be the preference override for |preference|.
    1. Return |result|.
</div>

Issue: This algorithm needs more detail on where the overrides are stored.

### {{colorScheme}} preference ### {#colorscheme-preference}

The {{colorScheme}} preference represents the user's preference for the color scheme of the site.
This is modeled after the `prefers-color-scheme` user preference media feature as defined in [[mediaqueries-5#prefers-color-scheme]].

<script type=idl>
enum ColorSchemePref { "light", "dark" };
</script>

### {{contrast}} preference ### {#contrast-preference}

The {{contrast}} preference represents the user's preference for the contrast of the site.
This is modeled after the `prefers-contrast` user preference media feature as defined in [[mediaqueries-5#prefers-contrast]].

Unlike the media feature this preference is not able to be set to `custom` this is tightly coupled to the `forced-colors` media feature.

<script type=idl>
enum ContrastPref { "no-preference", "more", "less" };
</script>

### {{reducedMotion}} preference ### {#reducedmotion-preference}

The {{reducedMotion}} preference represents the user's preference for reduced motion on the site.
This is modeled after the `prefers-reduced-motion` user preference media feature as defined in [[mediaqueries-5#prefers-reduced-motion]].

<script type=idl>
enum ReducedMotionPref { "no-preference", "reduce" };
</script>

### {{reducedTransparency}} preference ### {#reducedtransparency-preference}

The {{reducedTransparency}} preference represents the user's preference for reduced transparency on the site.
This is modeled after the `prefers-reduced-transparency` user preference media feature as defined in [[mediaqueries-5#prefers-reduced-transparency]].

<script type=idl>
enum ReducedTransparencyPref { "no-preference", "reduce" };
</script>

### {{reducedData}} preference ### {#reduceddata-preference}

The {{reducedData}} preference represents the user's preference for reduced data usage on the site.
This is modeled after the `prefers-reduced-data` user preference media feature as defined in [[mediaqueries-5#prefers-reduced-data]].

<script type=idl>
enum ReducedDataPref { "no-preference", "reduce" };
</script>

# Usage Examples # {#usage-examples}

*This section is non-normative.*

Each preference the browser supports will be exposed as a property on the `navigator.preferences` object.

Feature detection for a given preference is as simple as:

```js
const colorSchemeSupported = 'colorScheme' in navigator.preferences;
```

## Setting a preference override ## {#setting-a-preference-override}

To set a preference override, the property can be set to a valid value for the preference.
If an invalid value is set then this will be a no-op.

```js
navigator.preferences.colorScheme = 'dark';
```

## Clearing a preference override ## {#clearing-overrides}

To clear an override and return the preference to the browser default, the property can be set to null.

```js
navigator.preferences.colorScheme = null;
```

## Getting a preference override ## {#getting-a-preference-override}

To get the value of a preference override, the property can be read.
Each property will return the string value indicating the preference, or null if no override is set.

```js
const colorScheme = navigator.preferences.colorScheme; // "light" | "dark" | null
```

## The `navigator.preferences.getSupported` method ## {#get-supported}

This method allows a site to get the preferences supported by the browser. This is useful for sites that want to dynamically generate UI for overriding preferences.

It also allows sites to determine if a preference value is supported before attempting to set it.

```js
const preferenceSupportData = await navigator.preferences.getSupported();
console.log(preferenceSupportData); // [ { name: 'contrast', values: ['more', 'less', 'no-preference'] }, ... ]
```

# Security and Privacy Considerations # {#sec-security}

*This section is non-normative.*

## Avoiding fingerprinting ## {#fingerprinting}

This API exposes no new fingerprinting surfaces beyond that which already exist in the platform.

## Permissions & User Activation ## {#permissions}

This API does not require any permissions or user activation. It exposes no new capabilities to a site beyond that which already exists in the platform.

A site can already store a value in local storage and read into the DOM to override a preference. This API simply makes the ergonomics of this better.

## Sub-resources ## {#sub-resources}

Note: See <a href="https://github.com/lukewarlow/web-preferences-api/issues/8">#8</a> for discussion regarding this.

For the spec we can probably find an existing definition to reference, but for the purposes of this explainer:

- Any [=same origin=] subresource (e.g. iframes) should get the overridden value.
- Any cross-origin subresource that already has communication with the parent (e.g. `postMessage`) should get the override value.
- Any cross-origin subresource with no external communication (e.g. an SVG loaded as an image) should get the override value.
- Any cross-origin subresource that has no communication with parent but can communicate externally should **NOT** get the override value.

Wherever the override value is passed down it should be done so in an opaque manner.

<div class="example">
If the parent frame sets `colorScheme` to `dark` then the iframe should see `prefers-color-scheme` as dark but shouldn't read `navigator.preferences.colorScheme` as `dark`.
</div>

# Acknowledgements # {#sec-acknowledgements}

*This section is non-normative.*

Issue: TODO fill in acknowledgements section
